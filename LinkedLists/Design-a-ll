class MyLinkedList {
public:
    struct node {
        int val;
        node *next;
        
        // Constructor
        node(int value) : val(value), next(nullptr) {}
    };
    
    node *head;
    int size;
    
    MyLinkedList() {
        head = nullptr;
        size = 0;
    }
    
    int get(int index) {
        if (index < 0 || index >= size)
            return -1;

        int i = 0;
        node *temp = head;
        while (i < index) {
            temp = temp->next;
            i++;
        }
        return temp->val;
    }
    
    void addAtHead(int val) {
        node *temp = new node(val);
        temp->next = head;
        head = temp;
        size++;
    }
    
    void addAtTail(int val) {
        node *temp = new node(val);
        if (head == nullptr) {
            head = temp;
        } else {
            node *curr = head;
            while (curr->next != nullptr) {
                curr = curr->next;
            }
            curr->next = temp;
        }
        size++;
    }
    
    void addAtIndex(int index, int val) {
        if (index < 0 || index > size)
            return;

        if (index == 0) {
            addAtHead(val);
        } else {
            node *temp = new node(val);
            node *curr = head;
            int i = 0;
            while (i < index - 1) {
                curr = curr->next;
                i++;
            }
            temp->next = curr->next;
            curr->next = temp;
            size++;
        }
    }
    
    void deleteAtIndex(int index) {
        if (index < 0 || index >= size)
            return;

        if (index == 0) {
            node *temp = head;
            head = head->next;
            delete temp;
        } else {
            int i = 0;
            node *curr = head;
            while (i < index - 1) {
                curr = curr->next;
                i++;
            }
            node *temp = curr->next;
            curr->next = temp->next;
            delete temp;
        }
        size--;
    }
};
